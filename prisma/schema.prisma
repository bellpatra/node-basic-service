generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String               @id @default(uuid())
  username  String               @unique
  email     String               @unique
  password  String
  fullName  String?
  role      String               @default("user")
  isActive  Boolean              @default(true)
  lastLogin DateTime?
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  roles     UserRole[]
  documents Document[]            @relation("UserDocuments")
  docPerms  DocumentPermission[]  @relation("UserDocumentPermissions")
}

model Role {
  id          Int                       @id @default(autoincrement())
  name        String                    @unique
  description String?
  users       UserRole[]
  permissions RolePermission[]
  attrPerms   RoleAttributePermission[]
}

model UserRole {
  userId String
  roleId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model Permission {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  roles       RolePermission[]
}

model RolePermission {
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model AttributePermission {
  id             Int     @id @default(autoincrement())
  tableName      String
  columnName     String
  permissionType String
  roles          RoleAttributePermission[]

  @@unique([tableName, columnName, permissionType])
}

model RoleAttributePermission {
  roleId               Int
  attributePermissionId Int
  role                 Role                @relation(fields: [roleId], references: [id], onDelete: Cascade)
  attributePermission  AttributePermission @relation(fields: [attributePermissionId], references: [id], onDelete: Cascade)

  @@id([roleId, attributePermissionId])
}

model Document {
  id         Int                  @id @default(autoincrement())
  title      String
  filePath   String
  ownerId    String?
  owner      User?                @relation("UserDocuments", fields: [ownerId], references: [id], onDelete: SetNull)
  createdAt  DateTime             @default(now())
  accessList DocumentPermission[]
}

model DocumentPermission {
  id             Int      @id @default(autoincrement())
  documentId     Int
  userId         String
  permissionType String
  document       Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user           User     @relation("UserDocumentPermissions", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([documentId, userId, permissionType])
}
